{"version":3,"sources":["NativeStackView.native.tsx"],"names":["isAndroid","Platform","OS","MaybeNestedStack","options","route","presentation","headerHeight","children","colors","header","headerShown","contentStyle","isHeaderInModal","undefined","headerShownPreviousRef","React","useRef","useEffect","current","name","content","styles","container","backgroundColor","background","StyleSheet","absoluteFill","SceneView","descriptor","previousDescriptor","nextDescriptor","index","onWillDisappear","onAppear","onDisappear","onDismissed","navigation","render","animationDuration","animationTypeForReplace","gestureEnabled","autoHideHomeIndicator","navigationBarColor","navigationBarHidden","orientation","statusBarAnimation","statusBarHidden","statusBarStyle","statusBarTranslucent","statusBarColor","animation","customAnimationOnGesture","fullScreenGestureEnabled","gestureDirection","nextGestureDirection","gestureDirectionOverride","isHeaderInPush","insets","frame","isModal","isIPhone","isPad","isTVOS","isLandscape","width","height","topInset","top","isParentHeaderShown","useContext","HeaderShownContext","parentHeaderHeight","HeaderHeightContext","defaultHeaderHeight","customHeaderHeight","setCustomHeaderHeight","useState","key","e","nativeEvent","layout","back","title","NativeStackViewInner","state","descriptors","nextDismissedKey","setNextDismissedKey","dismissedRouteName","routes","find","message","console","error","map","previousKey","nextKey","emit","type","data","closing","target","event","dispatch","StackActions","pop","dismissCount","source","NativeStackView","props","create","flex"],"mappings":"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","sourcesContent":["import {\n  getDefaultHeaderHeight,\n  getHeaderTitle,\n  HeaderHeightContext,\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  useSafeAreaFrame,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport type { ScreenProps } from 'react-native-screens';\nimport {\n  Screen,\n  ScreenStack,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport warnOnce from 'warn-once';\n\nimport type {\n  NativeStackDescriptor,\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n  NativeStackNavigationOptions,\n} from '../types';\nimport DebugContainer from './DebugContainer';\nimport HeaderConfig from './HeaderConfig';\n\nconst isAndroid = Platform.OS === 'android';\n\nconst MaybeNestedStack = ({\n  options,\n  route,\n  presentation,\n  headerHeight,\n  children,\n}: {\n  options: NativeStackNavigationOptions;\n  route: Route<string>;\n  presentation: Exclude<StackPresentationTypes, 'push'> | 'card';\n  headerHeight: number;\n  children: React.ReactNode;\n}) => {\n  const { colors } = useTheme();\n  const { header, headerShown = true, contentStyle } = options;\n\n  const isHeaderInModal = isAndroid\n    ? false\n    : presentation !== 'card' && headerShown === true && header === undefined;\n\n  const headerShownPreviousRef = React.useRef(headerShown);\n\n  React.useEffect(() => {\n    warnOnce(\n      !isAndroid &&\n        presentation !== 'card' &&\n        headerShownPreviousRef.current !== headerShown,\n      `Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '${route.name}'.`\n    );\n\n    headerShownPreviousRef.current = headerShown;\n  }, [headerShown, presentation, route.name]);\n\n  const content = (\n    <DebugContainer\n      style={[\n        styles.container,\n        presentation !== 'transparentModal' &&\n          presentation !== 'containedTransparentModal' && {\n            backgroundColor: colors.background,\n          },\n        contentStyle,\n      ]}\n      stackPresentation={presentation === 'card' ? 'push' : presentation}\n    >\n      {children}\n    </DebugContainer>\n  );\n\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.container}>\n        <Screen enabled style={StyleSheet.absoluteFill}>\n          <HeaderConfig\n            {...options}\n            route={route}\n            headerHeight={headerHeight}\n            canGoBack\n          />\n          {content}\n        </Screen>\n      </ScreenStack>\n    );\n  }\n\n  return content;\n};\n\ntype SceneViewProps = {\n  index: number;\n  descriptor: NativeStackDescriptor;\n  previousDescriptor?: NativeStackDescriptor;\n  nextDescriptor?: NativeStackDescriptor;\n  onWillDisappear: () => void;\n  onAppear: () => void;\n  onDisappear: () => void;\n  onDismissed: ScreenProps['onDismissed'];\n};\n\nconst SceneView = ({\n  descriptor,\n  previousDescriptor,\n  nextDescriptor,\n  index,\n  onWillDisappear,\n  onAppear,\n  onDisappear,\n  onDismissed,\n}: SceneViewProps) => {\n  const { route, navigation, options, render } = descriptor;\n  const {\n    animationDuration,\n    animationTypeForReplace = 'push',\n    gestureEnabled,\n    header,\n    headerShown,\n    autoHideHomeIndicator,\n    navigationBarColor,\n    navigationBarHidden,\n    orientation,\n    statusBarAnimation,\n    statusBarHidden,\n    statusBarStyle,\n    statusBarTranslucent,\n    statusBarColor,\n  } = options;\n\n  let {\n    animation,\n    customAnimationOnGesture,\n    fullScreenGestureEnabled,\n    presentation = 'card',\n    gestureDirection = presentation === 'card' ? 'horizontal' : 'vertical',\n  } = options;\n\n  if (gestureDirection === 'vertical' && Platform.OS === 'ios') {\n    // for `vertical` direction to work, we need to set `fullScreenGestureEnabled` to `true`\n    // so the screen can be dismissed from any point on screen.\n    // `customAnimationOnGesture` needs to be set to `true` so the `animation` set by user can be used,\n    // otherwise `simple_push` will be used.\n    // Also, the default animation for this direction seems to be `slide_from_bottom`.\n    if (fullScreenGestureEnabled === undefined) {\n      fullScreenGestureEnabled = true;\n    }\n    if (customAnimationOnGesture === undefined) {\n      customAnimationOnGesture = true;\n    }\n    if (animation === undefined) {\n      animation = 'slide_from_bottom';\n    }\n  }\n\n  // workaround for rn-screens where gestureDirection has to be set on both\n  // current and previous screen - software-mansion/react-native-screens/pull/1509\n  const nextGestureDirection = nextDescriptor?.options.gestureDirection;\n  const gestureDirectionOverride =\n    nextGestureDirection != null ? nextGestureDirection : gestureDirection;\n\n  if (index === 0) {\n    // first screen should always be treated as `card`, it resolves problems with no header animation\n    // for navigator with first screen as `modal` and the next as `card`\n    presentation = 'card';\n  }\n\n  const isHeaderInPush = isAndroid\n    ? headerShown\n    : presentation === 'card' && headerShown !== false;\n\n  const insets = useSafeAreaInsets();\n  const frame = useSafeAreaFrame();\n\n  // `modal` and `formSheet` presentations do not take whole screen, so should not take the inset.\n  const isModal = presentation === 'modal' || presentation === 'formSheet';\n\n  // Modals are fullscreen in landscape only on iPhone\n  const isIPhone =\n    Platform.OS === 'ios' && !(Platform.isPad || Platform.isTVOS);\n  const isLandscape = frame.width > frame.height;\n\n  const topInset = isModal || (isIPhone && isLandscape) ? 0 : insets.top;\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n\n  const defaultHeaderHeight = getDefaultHeaderHeight(frame, isModal, topInset);\n\n  const [customHeaderHeight, setCustomHeaderHeight] =\n    React.useState(defaultHeaderHeight);\n\n  const headerHeight = header ? customHeaderHeight : defaultHeaderHeight;\n\n  return (\n    <Screen\n      key={route.key}\n      enabled\n      style={StyleSheet.absoluteFill}\n      customAnimationOnSwipe={customAnimationOnGesture}\n      fullScreenSwipeEnabled={fullScreenGestureEnabled}\n      gestureEnabled={\n        isAndroid\n          ? // This prop enables handling of system back gestures on Android\n            // Since we handle them in JS side, we disable this\n            false\n          : gestureEnabled\n      }\n      homeIndicatorHidden={autoHideHomeIndicator}\n      navigationBarColor={navigationBarColor}\n      navigationBarHidden={navigationBarHidden}\n      replaceAnimation={animationTypeForReplace}\n      stackPresentation={presentation === 'card' ? 'push' : presentation}\n      stackAnimation={animation}\n      screenOrientation={orientation}\n      statusBarAnimation={statusBarAnimation}\n      statusBarHidden={statusBarHidden}\n      statusBarStyle={statusBarStyle}\n      statusBarColor={statusBarColor}\n      statusBarTranslucent={statusBarTranslucent}\n      swipeDirection={gestureDirectionOverride}\n      transitionDuration={animationDuration}\n      onWillDisappear={onWillDisappear}\n      onAppear={onAppear}\n      onDisappear={onDisappear}\n      onDismissed={onDismissed}\n      isNativeStack\n    >\n      <NavigationContext.Provider value={navigation}>\n        <NavigationRouteContext.Provider value={route}>\n          <HeaderShownContext.Provider\n            value={isParentHeaderShown || isHeaderInPush !== false}\n          >\n            <HeaderHeightContext.Provider\n              value={\n                isHeaderInPush !== false\n                  ? headerHeight\n                  : parentHeaderHeight ?? 0\n              }\n            >\n              {header !== undefined && headerShown !== false ? (\n                <View\n                  onLayout={(e) => {\n                    setCustomHeaderHeight(e.nativeEvent.layout.height);\n                  }}\n                >\n                  {header({\n                    back: previousDescriptor\n                      ? {\n                          title: getHeaderTitle(\n                            previousDescriptor.options,\n                            previousDescriptor.route.name\n                          ),\n                        }\n                      : undefined,\n                    options,\n                    route,\n                    navigation,\n                  })}\n                </View>\n              ) : (\n                <HeaderConfig\n                  {...options}\n                  route={route}\n                  headerShown={isHeaderInPush}\n                  headerHeight={headerHeight}\n                  canGoBack={index !== 0}\n                />\n              )}\n              <MaybeNestedStack\n                options={options}\n                route={route}\n                presentation={presentation}\n                headerHeight={headerHeight}\n              >\n                {render()}\n              </MaybeNestedStack>\n            </HeaderHeightContext.Provider>\n          </HeaderShownContext.Provider>\n        </NavigationRouteContext.Provider>\n      </NavigationContext.Provider>\n    </Screen>\n  );\n};\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nfunction NativeStackViewInner({ state, navigation, descriptors }: Props) {\n  const [nextDismissedKey, setNextDismissedKey] = React.useState<string | null>(\n    null\n  );\n\n  const dismissedRouteName = nextDismissedKey\n    ? state.routes.find((route) => route.key === nextDismissedKey)?.name\n    : null;\n\n  React.useEffect(() => {\n    if (dismissedRouteName) {\n      const message =\n        `The screen '${dismissedRouteName}' was removed natively but didn't get removed from JS state. ` +\n        `This can happen if the action was prevented in a 'beforeRemove' listener, which is not fully supported in native-stack.\\n\\n` +\n        `Consider using 'gestureEnabled: false' to prevent back gesture and use a custom back button with 'headerLeft' option to override the native behavior.`;\n\n      console.error(message);\n    }\n  }, [dismissedRouteName]);\n\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map((route, index) => {\n        const descriptor = descriptors[route.key];\n        const previousKey = state.routes[index - 1]?.key;\n        const nextKey = state.routes[index + 1]?.key;\n        const previousDescriptor = previousKey\n          ? descriptors[previousKey]\n          : undefined;\n        const nextDescriptor = nextKey ? descriptors[nextKey] : undefined;\n\n        return (\n          <SceneView\n            key={route.key}\n            index={index}\n            descriptor={descriptor}\n            previousDescriptor={previousDescriptor}\n            nextDescriptor={nextDescriptor}\n            onWillDisappear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onAppear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onDisappear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onDismissed={(event) => {\n              navigation.dispatch({\n                ...StackActions.pop(event.nativeEvent.dismissCount),\n                source: route.key,\n                target: state.key,\n              });\n\n              setNextDismissedKey(route.key);\n            }}\n          />\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nexport default function NativeStackView(props: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <NativeStackViewInner {...props} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}